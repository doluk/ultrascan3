name: Static Analysis (CMake-Based)
on:
  push:
  pull_request:
    branches: [ master ]
    paths:
      - 'gui/**/*.cpp'
      - 'gui/**/*.h'
      - 'programs/**/*.cpp'
      - 'programs/**/*.h'
      - 'utils/**/*.cpp'
      - 'utils/**/*.h'
      - '.github/workflows/static-analysis.yml'
      - 'CMakeLists.txt'
      - '**/CMakeLists.txt'
      - '**/*.cmake'
  workflow_dispatch:

jobs:
  static-analysis:
    runs-on: ubuntu-latest
    container:
      image: ehb1/us3comp:latest
      options: --cpus 2

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Allow CI to access repo directory
        run: git config --global --add safe.directory /__w/ultrascan3/ultrascan3

      - name: Install Analysis Tools and CMake Dependencies
        run: |
          apt-get update || true
          apt-get install -y clang-tidy cppcheck clang-format libxml2-utils || true
          apt-get install -y libqwt-qt5-dev libarchive-dev || true
          apt-get install -y iwyu cmake ninja-build || true
          
          # Verify CMake version
          cmake --version || true

      - name: Setup Build Environment
        run: |
          # Set up any environment variables your CMake might need
          export ULTRASCAN=$(pwd)
          export us3=$(pwd)
          echo "ULTRASCAN=$(pwd)" >> $GITHUB_ENV
          echo "us3=$(pwd)" >> $GITHUB_ENV
          
          # Set up revision info if needed
          if [ -d programs/us ]; then
            (cd programs/us && sh revision.sh) || true
          fi

      - name: Configure with CMake and Generate Compile Commands
        run: |
          echo "Configuring build with CMake..."
          
          # Create build directory
          mkdir -p build
          cd build
          
          # Configure with CMake - this will use your FindQwt.cmake
          cmake .. \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DQT_QMAKE_EXECUTABLE=$(which qmake) \
            -G "Unix Makefiles" || true
          
          # Copy compile commands to root for tools to find
          if [ -f compile_commands.json ]; then
            cp compile_commands.json ../
            echo "Generated compile_commands.json with CMake"
            echo "Compile commands contain $(cat ../compile_commands.json | jq length 2>/dev/null || echo "unknown") entries"
          else
            echo "Warning: Failed to generate compile_commands.json"
          fi
          
          cd ..

      - name: Build Components to Resolve Dependencies
        run: |
          echo "Building components to ensure all dependencies are available..."
          
          cd build
          
          # Build in parallel to resolve all dependencies
          make -j4 || true
          
          echo "Build completed (errors ignored for analysis purposes)"
          cd ..

      - name: Validate Compile Commands
        run: |
          if [ -f compile_commands.json ]; then
            echo "Compile commands database found"
            echo "Sample entries:"
            head -20 compile_commands.json || true
          
            # Check if it contains our problematic file
            if grep -q "us_report_general_gui.cpp" compile_commands.json; then
              echo "Found problematic file in compile database"
              grep -A5 -B5 "us_report_general_gui.cpp" compile_commands.json || true
            fi
          else
            echo "No compile commands database found - tools will use manual include paths"
          fi

      - name: Run Clang-Tidy with CMake-Generated Commands
        run: |
          if command -v clang-tidy >/dev/null 2>&1; then
            echo "Running Clang-Tidy analysis..."
            clang-tidy --version
          
            if [ -f compile_commands.json ]; then
              echo "Using CMake-generated compile commands database"
          
              # Find C++ files to analyze
              find gui utils programs -name "*.cpp" -type f | head -20 | while read -r file; do
                echo "Analyzing: $file"
          
                # Use compile_commands.json - this should have all the right paths
                clang-tidy "$file" \
                  -p . \
                  --checks='-*,clang-analyzer-*,cppcoreguidelines-*,modernize-*,performance-*,readability-*,bugprone-*,misc-*,clang-analyzer-deadcode*' \
                  --header-filter='.*' \
                  2>&1 || echo "Analysis completed with warnings for $file"
              done > clang-tidy-report.txt 2>&1 || true
          
            else
              echo "No compile commands available, using manual include discovery"
          
              # Fallback: extract includes from CMake cache
              QT_INCLUDES=""
              QWT_INCLUDES=""
          
              if [ -f build/CMakeCache.txt ]; then
                QT_INCLUDES=$(grep "QT.*_INCLUDE_DIR" build/CMakeCache.txt | cut -d'=' -f2 | tr '\n' ' ') || true
                # Look for Qwt paths in CMake cache
                QWT_INCLUDES=$(grep -i "qwt.*include" build/CMakeCache.txt | cut -d'=' -f2 | tr '\n' ' ') || true
              fi
          
              find gui utils programs -name "*.cpp" -type f | head -20 | while read -r file; do
                echo "Analyzing: $file"
                clang-tidy "$file" \
                  --checks='-*,clang-analyzer-*,cppcoreguidelines-*,modernize-*,performance-*,readability-*,bugprone-*,misc-*' \
                  -- -I./gui -I./utils -I./qwtplot3d/include \
                     ${QT_INCLUDES} ${QWT_INCLUDES} \
                     -DINTEL -DLINUX -DQT_WIDGETS_LIB -DQT_XML_LIB \
                  2>&1 || true
              done > clang-tidy-report.txt || true
            fi
          
            echo "Clang-Tidy analysis completed"
          else
            echo "Clang-tidy not available" > clang-tidy-report.txt
          fi

      - name: Run Cppcheck Analysis
        run: |
          echo "Running Cppcheck analysis..."
          
          if [ -f compile_commands.json ]; then
            echo "Using compile commands database for Cppcheck"
            cppcheck --project=compile_commands.json \
              --enable=all --inconclusive --xml --xml-version=2 \
              --suppress=missingIncludeSystem \
              --suppress=unmatchedSuppression \
              --library=qt --library=posix \
              --platform=unix64 \
              2> cppcheck-report.xml || true
          else
            echo "Using manual paths for Cppcheck"
            cppcheck --enable=all --inconclusive --xml --xml-version=2 \
              --suppress=missingIncludeSystem \
              --suppress=unmatchedSuppression \
              --library=qt --library=posix \
              --platform=unix64 \
              -I./gui -I./utils -I./qwtplot3d/include \
              -DINTEL -DLINUX \
              gui/ utils/ programs/ 2> cppcheck-report.xml || true
          fi
          
          echo "Cppcheck analysis completed"

      - name: Run Include-What-You-Use Analysis
        run: |
          echo "IWYU analysis temporarily disabled due to Qt header resolution issues" > iwyu-report.txt
          echo "IWYU requires complex setup for Qt projects and may need manual configuration" >> iwyu-report.txt
          echo "Consider enabling this after Clang-Tidy and Cppcheck are working properly" >> iwyu-report.txt
          
          # Uncomment below when ready to debug IWYU properly
          # if command -v iwyu_tool.py >/dev/null 2>&1; then
          #   echo "Running Include-What-You-Use analysis..."
          #   if [ -f compile_commands.json ]; then
          #     iwyu_tool.py -p . gui/ programs/ utils/ > iwyu-report.txt 2>&1 || true
          #   fi
          # fi

      - name: Run Clang-Format Check
        run: |
          if command -v clang-format >/dev/null 2>&1; then
            echo "Checking code formatting standards..."
          
            # Create a list of formatting issues
            find gui programs utils -name "*.cpp" -o -name "*.h" | while read -r file; do
              if ! clang-format --dry-run --Werror "$file" >/dev/null 2>&1; then
                echo "Format issues in: $file"
              fi
            done > format-issues.txt 2>&1 || true
          
            echo "Format check completed"
          else
            echo "clang-format not available, skipping format check" > format-issues.txt
          fi

      - name: Generate Analysis Summary
        run: |
          echo "## Static Analysis Results (CMake-Based)" > analysis-summary.md
          echo "" >> analysis-summary.md
          
          echo "### Build Configuration" >> analysis-summary.md
          echo '```' >> analysis-summary.md
          echo "CMake configuration used for dependency resolution" >> analysis-summary.md
          if [ -f compile_commands.json ]; then
            echo "Compile commands database: $(cat compile_commands.json | jq length 2>/dev/null || echo "present") entries" >> analysis-summary.md
          else
            echo "Compile commands database: not generated" >> analysis-summary.md
          fi
          echo '```' >> analysis-summary.md
          echo "" >> analysis-summary.md
          
          echo "### Clang-Tidy Results" >> analysis-summary.md
          echo '```' >> analysis-summary.md
          if [ -f clang-tidy-report.txt ]; then
            head -50 clang-tidy-report.txt >> analysis-summary.md
          else
            echo "No clang-tidy report generated" >> analysis-summary.md
          fi
          echo '```' >> analysis-summary.md
          echo "" >> analysis-summary.md
          
          echo "### Cppcheck Results" >> analysis-summary.md
          echo '```' >> analysis-summary.md
          if [ -f cppcheck-report.xml ]; then
            if command -v xmllint >/dev/null 2>&1; then
              xmllint --format cppcheck-report.xml | head -50 >> analysis-summary.md || head -50 cppcheck-report.xml >> analysis-summary.md
            else
              head -50 cppcheck-report.xml >> analysis-summary.md
            fi
          else
            echo "No cppcheck report generated" >> analysis-summary.md
          fi
          echo '```' >> analysis-summary.md
          echo "" >> analysis-summary.md
          
          echo "### Include-What-You-Use Results" >> analysis-summary.md
          echo '```' >> analysis-summary.md
          if [ -f iwyu-report.txt ]; then
            head -50 iwyu-report.txt >> analysis-summary.md
          else
            echo "No IWYU report generated" >> analysis-summary.md
          fi
          echo '```' >> analysis-summary.md
          echo "" >> analysis-summary.md
          
          echo "### Format Issues" >> analysis-summary.md
          echo '```' >> analysis-summary.md
          if [ -f format-issues.txt ]; then
            cat format-issues.txt >> analysis-summary.md
          else
            echo "No format issues file generated" >> analysis-summary.md
          fi
          echo '```' >> analysis-summary.md

      - name: Display Results Summary
        run: |
          echo "=== STATIC ANALYSIS COMPLETE ==="
          echo ""
          if [ -f clang-tidy-report.txt ]; then
            issue_count=$(wc -l < clang-tidy-report.txt)
            echo "Clang-tidy generated $issue_count lines of output"
          else
            echo "Clang-tidy report not found"
          fi
          
          if [ -f cppcheck-report.xml ]; then
            error_count=$(grep -c "<error" cppcheck-report.xml 2>/dev/null || echo "0")
            echo "Cppcheck found $error_count potential issues"
          else
            echo "Cppcheck report not found"
          fi
          
          echo "Analysis summary:"
          cat analysis-summary.md || echo "No analysis summary generated"

      - name: Upload Analysis Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cmake-static-analysis-reports
          path: |
            clang-tidy-report.txt
            cppcheck-report.xml
            iwyu-report.txt
            analysis-summary.md
            format-issues.txt
            compile_commands.json

      - name: Comment PR with Results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        continue-on-error: true
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('analysis-summary.md')) {
              const summary = fs.readFileSync('analysis-summary.md', 'utf8');
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            } else {
              console.log('No analysis summary found to comment');
            }

      - name: Report Issues (Non-Failing)
        run: |
          # Count issues but don't fail the build
          critical_issues=0
          
          if [ -f clang-tidy-report.txt ]; then
            critical_issues=$(grep -c "error:" clang-tidy-report.txt 2>/dev/null || echo "0")
          fi
          
          echo "Found $critical_issues critical issues in Clang-Tidy analysis"
          
          if [ "$critical_issues" -gt 50 ]; then
            echo "WARNING: Many critical issues found: $critical_issues"
            echo "This would normally fail the build, but we're in introduction mode"
            echo "Consider addressing these issues before enabling strict mode"
          else
            echo "Critical issues within acceptable range: $critical_issues"
          fi
          
          echo "Static analysis completed successfully (non-failing mode)"