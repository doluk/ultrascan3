name: Static Analysis (Smart & Actionable)
on:
  push: &trigger_config
    branches: [ master ]
    paths:
      - 'gui/**/*.cpp'
      - 'gui/**/*.h'
      - 'programs/**/*.cpp'
      - 'programs/**/*.h'
      - 'utils/**/*.cpp'
      - 'utils/**/*.h'
      - '.github/workflows/static-analysis.yml'
      - 'CMakeLists.txt'
      - '**/CMakeLists.txt'
      - '**/*.cmake'
  pull_request:
    <<: *trigger_config #uses trigger definition from push
  workflow_dispatch:

jobs:
  static-analysis:
    runs-on: ubuntu-latest
    container:
      image: ehb1/us3comp:latest
      options: --cpus 2

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Allow CI to access repo directory
        run: git config --global --add safe.directory /__w/ultrascan3/ultrascan3

      - name: Get Changed Files
        id: changed-files
        run: |
          # For PRs, compare against the base branch
          # For pushes, compare against the previous commit
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
            echo "Comparing PR changes: $BASE_SHA..$HEAD_SHA"
            CHANGED_FILES=$(git diff --name-only $BASE_SHA..$HEAD_SHA)
          else
            # For push events, compare with the previous commit
            if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
              echo "Comparing push changes: ${{ github.event.before }}..${{ github.sha }}"
              CHANGED_FILES=$(git diff --name-only ${{ github.event.before }}..${{ github.sha }})
            else
              # First commit, analyze all files
              echo "First commit - analyzing all files"
              CHANGED_FILES=$(find gui utils programs -name "*.cpp" -o -name "*.h" 2>/dev/null || true)
            fi
          fi
          
          # Filter to only C++ files we care about
          CPP_FILES=$(echo "$CHANGED_FILES" | grep -E '\.(cpp|h)$' | grep -E '^(gui|utils|programs)/' || true)
          
          echo "Changed C++ files:"
          echo "$CPP_FILES"
          
          # Save to file for later steps
          echo "$CPP_FILES" > changed_cpp_files.txt
          
          # Count files - handle empty case properly
          if [ -n "$CPP_FILES" ] && [ "$CPP_FILES" != "" ]; then
            FILE_COUNT=$(echo "$CPP_FILES" | wc -l)
            # Remove any leading/trailing whitespace
            FILE_COUNT=$(echo "$FILE_COUNT" | tr -d ' ')
          else
            FILE_COUNT=0
          fi
          
          echo "CHANGED_FILE_COUNT=$FILE_COUNT" >> $GITHUB_ENV
          
          if [ "$FILE_COUNT" -eq 0 ]; then
            echo "No C++ files changed - static analysis will be skipped"
            echo "SKIP_ANALYSIS=true" >> $GITHUB_ENV
          else
            echo "Will analyze $FILE_COUNT changed C++ files"
            echo "SKIP_ANALYSIS=false" >> $GITHUB_ENV
          fi

      - name: Install Analysis Tools and CMake Dependencies
        if: env.SKIP_ANALYSIS != 'true'
        run: |
          apt-get update || true
          apt-get install -y clang-tidy cppcheck clang-format libxml2-utils jq || true
          apt-get install -y libqwt-qt5-dev libarchive-dev || true
          apt-get install -y iwyu cmake ninja-build || true

      - name: Setup Build Environment
        if: env.SKIP_ANALYSIS != 'true'
        run: |
          export ULTRASCAN=$(pwd)
          export us3=$(pwd)
          echo "ULTRASCAN=$(pwd)" >> $GITHUB_ENV
          echo "us3=$(pwd)" >> $GITHUB_ENV
          
          if [ -d programs/us ]; then
            (cd programs/us && sh revision.sh) || true
          fi

      - name: Configure with CMake and Generate Compile Commands
        if: env.SKIP_ANALYSIS != 'true'
        run: |
          echo "Configuring build with CMake..."
          mkdir -p build
          cd build
          
          cmake .. \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DQT_QMAKE_EXECUTABLE=$(which qmake) \
            -G "Unix Makefiles" || true
          
          if [ -f compile_commands.json ]; then
            cp compile_commands.json ../
            echo "Generated compile_commands.json with CMake"
          else
            echo "Warning: Failed to generate compile_commands.json"
          fi
          cd ..

      - name: Build Components to Resolve Dependencies
        if: env.SKIP_ANALYSIS != 'true'
        run: |
          echo "Building components to ensure all dependencies are available..."
          cd build
          make -j4 || true
          echo "Build completed (errors ignored for analysis purposes)"
          cd ..

      - name: Run Smart Clang-Tidy Analysis
        if: env.SKIP_ANALYSIS != 'true'
        run: |
          if command -v clang-tidy >/dev/null 2>&1; then
            echo "Running focused Clang-Tidy analysis..."
            clang-tidy --version
          
            if [ ! -s changed_cpp_files.txt ]; then
              echo "No changed files to analyze"
              echo '{"files": [], "summary": {"total_issues": 0, "critical_issues": 0, "important_issues": 0, "performance_issues": 0, "files_with_issues": 0}}' > clang-tidy-results.json
              exit 0
            fi
          
            # Define check categories by severity
            CRITICAL_CHECKS="-*,clang-analyzer-core.*,clang-analyzer-security.*,clang-analyzer-unix.*,bugprone-use-after-move,bugprone-dangling-handle,bugprone-assert-side-effect,bugprone-infinite-loop"
            IMPORTANT_CHECKS="-*,clang-analyzer-cplusplus.*,clang-analyzer-deadcode.*,bugprone-easily-swappable-parameters,bugprone-branch-clone,bugprone-narrowing-conversions,bugprone-macro-*,bugprone-reserved-identifier"
            PERFORMANCE_CHECKS="-*,performance-*"
          
            # Initialize results with proper structure
            echo '{"files": [], "summary": {"total_issues": 0, "critical_issues": 0, "important_issues": 0, "performance_issues": 0, "files_with_issues": 0}}' > clang-tidy-results.json
          
            TOTAL_ISSUES=0
            CRITICAL_ISSUES=0
            IMPORTANT_ISSUES=0
            PERFORMANCE_ISSUES=0
            FILES_WITH_ISSUES=0
          
            # Create separate analysis files
            > clang-tidy-critical.txt
            > clang-tidy-important.txt  
            > clang-tidy-performance.txt
          
            if [ -f compile_commands.json ]; then
              echo "Using CMake-generated compile commands database"
          
              while IFS= read -r file; do
                if [ -n "$file" ] && [ -f "$file" ]; then
                  echo "Analyzing: $file"
          
                  # Run critical checks
                  CRITICAL_OUTPUT=$(clang-tidy "$file" \
                    -p . \
                    --checks="$CRITICAL_CHECKS" \
                    --format-style=none \
                    2>&1 || true)
          
                  # Run important checks  
                  IMPORTANT_OUTPUT=$(clang-tidy "$file" \
                    -p . \
                    --checks="$IMPORTANT_CHECKS" \
                    --format-style=none \
                    2>&1 || true)
          
                  # Run performance checks
                  PERFORMANCE_OUTPUT=$(clang-tidy "$file" \
                    -p . \
                    --checks="$PERFORMANCE_CHECKS" \
                    --format-style=none \
                    2>&1 || true)
          
                  # Count issues by category - handle empty output safely
                  FILE_CRITICAL=0
                  FILE_IMPORTANT=0
                  FILE_PERFORMANCE=0
          
                  if [ -n "$CRITICAL_OUTPUT" ]; then
                    FILE_CRITICAL=$(echo "$CRITICAL_OUTPUT" | grep -c "warning:\|error:" 2>/dev/null || echo "0")
                    case "$FILE_CRITICAL" in
                        ''|*[!0-9]*) FILE_CRITICAL=0 ;;
                    esac
                  fi
          
                  if [ -n "$IMPORTANT_OUTPUT" ]; then
                    FILE_IMPORTANT=$(echo "$IMPORTANT_OUTPUT" | grep -c "warning:\|error:" 2>/dev/null || echo "0")
                    case "$FILE_IMPORTANT" in
                        ''|*[!0-9]*) FILE_IMPORTANT=0 ;;
                    esac
                  fi
          
                  if [ -n "$PERFORMANCE_OUTPUT" ]; then
                    FILE_PERFORMANCE=$(echo "$PERFORMANCE_OUTPUT" | grep -c "warning:\|error:" 2>/dev/null || echo "0")
                    case "$FILE_PERFORMANCE" in
                        ''|*[!0-9]*) FILE_PERFORMANCE=0 ;;
                    esac
                  fi
          
                  FILE_TOTAL=$((FILE_CRITICAL + FILE_IMPORTANT + FILE_PERFORMANCE))
          
                  if [ "$FILE_TOTAL" -gt 0 ]; then
                    FILES_WITH_ISSUES=$((FILES_WITH_ISSUES + 1))
                    TOTAL_ISSUES=$((TOTAL_ISSUES + FILE_TOTAL))
                    CRITICAL_ISSUES=$((CRITICAL_ISSUES + FILE_CRITICAL))
                    IMPORTANT_ISSUES=$((IMPORTANT_ISSUES + FILE_IMPORTANT))
                    PERFORMANCE_ISSUES=$((PERFORMANCE_ISSUES + FILE_PERFORMANCE))
          
                    # Save categorized issues
                    if [ "$FILE_CRITICAL" -gt 0 ]; then
                      echo "=== Critical Issues in $file ===" >> clang-tidy-critical.txt
                      echo "$CRITICAL_OUTPUT" | grep -E "(error:|warning:)" | head -5 >> clang-tidy-critical.txt
                      echo "" >> clang-tidy-critical.txt
                    fi
          
                    if [ "$FILE_IMPORTANT" -gt 0 ]; then
                      echo "=== Important Issues in $file ===" >> clang-tidy-important.txt
                      echo "$IMPORTANT_OUTPUT" | grep -E "(error:|warning:)" | head -5 >> clang-tidy-important.txt
                      echo "" >> clang-tidy-important.txt
                    fi
          
                    if [ "$FILE_PERFORMANCE" -gt 0 ]; then
                      echo "=== Performance Issues in $file ===" >> clang-tidy-performance.txt
                      echo "$PERFORMANCE_OUTPUT" | grep -E "(error:|warning:)" | head -3 >> clang-tidy-performance.txt
                      echo "" >> clang-tidy-performance.txt
                    fi
                  fi
                fi
              done < changed_cpp_files.txt
            fi
          
            # Create combined summary with top issues from each category
            > clang-tidy-summary.txt
            if [ "$CRITICAL_ISSUES" -gt 0 ]; then
              echo "=== CRITICAL ISSUES (Security/Correctness) ===" >> clang-tidy-summary.txt
              head -20 clang-tidy-critical.txt >> clang-tidy-summary.txt
              echo "" >> clang-tidy-summary.txt
            fi
          
            if [ "$IMPORTANT_ISSUES" -gt 0 ]; then
              echo "=== IMPORTANT ISSUES (Potential Bugs) ===" >> clang-tidy-summary.txt
              head -15 clang-tidy-important.txt >> clang-tidy-summary.txt
              echo "" >> clang-tidy-summary.txt
            fi
          
            if [ "$PERFORMANCE_ISSUES" -gt 0 ]; then
              echo "=== PERFORMANCE SUGGESTIONS ===" >> clang-tidy-summary.txt
              head -10 clang-tidy-performance.txt >> clang-tidy-summary.txt
              echo "" >> clang-tidy-summary.txt
            fi
          
            # Update summary with categorized counts
            jq --argjson total "$TOTAL_ISSUES" \
               --argjson critical "$CRITICAL_ISSUES" \
               --argjson important "$IMPORTANT_ISSUES" \
               --argjson performance "$PERFORMANCE_ISSUES" \
               --argjson files "$FILES_WITH_ISSUES" \
               '.summary.total_issues = $total | .summary.critical_issues = $critical | .summary.important_issues = $important | .summary.performance_issues = $performance | .summary.files_with_issues = $files' \
               clang-tidy-results.json > temp.json && mv temp.json clang-tidy-results.json
          
            echo "Clang-Tidy analysis completed: $CRITICAL_ISSUES critical, $IMPORTANT_ISSUES important, $PERFORMANCE_ISSUES performance issues"
          else
            echo "Clang-tidy not available" > clang-tidy-results.json
          fi

      - name: Run Smart Cppcheck Analysis
        if: env.SKIP_ANALYSIS != 'true'
        run: |
          echo "Running focused Cppcheck analysis..."
          
          if [ ! -s changed_cpp_files.txt ]; then
            echo '<?xml version="1.0" encoding="UTF-8"?><results version="2"></results>' > cppcheck-report.xml
            exit 0
          fi
          
          # Create a list of files to analyze
          FILES_TO_ANALYZE=""
          while IFS= read -r file; do
            if [ -n "$file" ] && [ -f "$file" ]; then
              FILES_TO_ANALYZE="$FILES_TO_ANALYZE $file"
            fi
          done < changed_cpp_files.txt
          
          if [ -n "$FILES_TO_ANALYZE" ]; then
            # Focus on the most important checks
            cppcheck \
              --enable=error,warning,performance,portability \
              --inconclusive --xml --xml-version=2 \
              --suppress=missingIncludeSystem \
              --suppress=unmatchedSuppression \
              --suppress=unusedFunction \
              --library=qt --library=posix \
              --platform=unix64 \
              --max-ctu-depth=10 \
              -I./gui -I./utils -I./qwtplot3d/include \
              -DINTEL -DLINUX \
              $FILES_TO_ANALYZE 2> cppcheck-report.xml || true
          else
            echo '<?xml version="1.0" encoding="UTF-8"?><results version="2"></results>' > cppcheck-report.xml
          fi

      - name: Parse Analysis Results
        if: env.SKIP_ANALYSIS != 'true'
        run: |
          echo "Parsing analysis results for summary..."
          
          # Parse Cppcheck results - handle missing file gracefully and validate numbers
          CPPCHECK_ERRORS=0
          CPPCHECK_WARNINGS=0
          CPPCHECK_PERFORMANCE=0
          CPPCHECK_PORTABILITY=0
          
          if [ -f cppcheck-report.xml ] && [ -s cppcheck-report.xml ]; then
            # Get counts and validate they're numbers
            TEMP_ERRORS=$(grep -c 'severity="error"' cppcheck-report.xml 2>/dev/null || echo "0")
            TEMP_WARNINGS=$(grep -c 'severity="warning"' cppcheck-report.xml 2>/dev/null || echo "0")
            TEMP_PERFORMANCE=$(grep -c 'severity="performance"' cppcheck-report.xml 2>/dev/null || echo "0")
            TEMP_PORTABILITY=$(grep -c 'severity="portability"' cppcheck-report.xml 2>/dev/null || echo "0")
          
            # Validate numbers before assignment
            case "$TEMP_ERRORS" in
                ''|*[!0-9]*) CPPCHECK_ERRORS=0 ;;
                *) CPPCHECK_ERRORS="$TEMP_ERRORS" ;;
            esac
            case "$TEMP_WARNINGS" in
                ''|*[!0-9]*) CPPCHECK_WARNINGS=0 ;;
                *) CPPCHECK_WARNINGS="$TEMP_WARNINGS" ;;
            esac
            case "$TEMP_PERFORMANCE" in
                ''|*[!0-9]*) CPPCHECK_PERFORMANCE=0 ;;
                *) CPPCHECK_PERFORMANCE="$TEMP_PERFORMANCE" ;;
            esac
            case "$TEMP_PORTABILITY" in
                ''|*[!0-9]*) CPPCHECK_PORTABILITY=0 ;;
                *) CPPCHECK_PORTABILITY="$TEMP_PORTABILITY" ;;
            esac
          fi
          
          echo "CPPCHECK_ERRORS=$CPPCHECK_ERRORS" >> $GITHUB_ENV
          echo "CPPCHECK_WARNINGS=$CPPCHECK_WARNINGS" >> $GITHUB_ENV
          echo "CPPCHECK_PERFORMANCE=$CPPCHECK_PERFORMANCE" >> $GITHUB_ENV
          echo "CPPCHECK_PORTABILITY=$CPPCHECK_PORTABILITY" >> $GITHUB_ENV
          
          # Extract top Cppcheck issues by severity - handle missing file gracefully
          if [ -f cppcheck-report.xml ] && [ -s cppcheck-report.xml ]; then
            # Extract critical issues (errors) first
            if [ "$CPPCHECK_ERRORS" -gt 0 ]; then
              echo "=== Cppcheck Errors (Critical) ===" > cppcheck-summary.txt
              xmllint --xpath "//error[@severity='error']" cppcheck-report.xml 2>/dev/null | head -5 >> cppcheck-summary.txt || true
              echo "" >> cppcheck-summary.txt
            fi
          
            # Then warnings  
            if [ "$CPPCHECK_WARNINGS" -gt 0 ]; then
              echo "=== Cppcheck Warnings ===" >> cppcheck-summary.txt
              xmllint --xpath "//error[@severity='warning']" cppcheck-report.xml 2>/dev/null | head -5 >> cppcheck-summary.txt || true
              echo "" >> cppcheck-summary.txt
            fi
          
            # Finally performance suggestions
            if [ "$CPPCHECK_PERFORMANCE" -gt 0 ]; then
              echo "=== Cppcheck Performance Suggestions ===" >> cppcheck-summary.txt
              xmllint --xpath "//error[@severity='performance']" cppcheck-report.xml 2>/dev/null | head -3 >> cppcheck-summary.txt || true
            fi
          fi

      - name: Generate Actionable PR Comment
        if: env.SKIP_ANALYSIS != 'true'
        run: |
          # Read clang-tidy results - handle missing or invalid JSON with better validation
          CLANG_TIDY_TOTAL=0
          CLANG_TIDY_CRITICAL=0
          CLANG_TIDY_IMPORTANT=0
          CLANG_TIDY_PERFORMANCE=0
          CLANG_TIDY_FILES=0
          
          if [ -f clang-tidy-results.json ]; then
            # Validate JSON first and extract numbers safely
            if jq empty clang-tidy-results.json >/dev/null 2>&1; then
              TEMP_TOTAL=$(jq -r '.summary.total_issues // 0' clang-tidy-results.json 2>/dev/null || echo "0")
              TEMP_CRITICAL=$(jq -r '.summary.critical_issues // 0' clang-tidy-results.json 2>/dev/null || echo "0")
              TEMP_IMPORTANT=$(jq -r '.summary.important_issues // 0' clang-tidy-results.json 2>/dev/null || echo "0")
              TEMP_PERFORMANCE=$(jq -r '.summary.performance_issues // 0' clang-tidy-results.json 2>/dev/null || echo "0")
              TEMP_FILES=$(jq -r '.summary.files_with_issues // 0' clang-tidy-results.json 2>/dev/null || echo "0")
          
              # Validate numbers
              case "$TEMP_TOTAL" in
                  ''|*[!0-9]*) CLANG_TIDY_TOTAL=0 ;;
                  *) CLANG_TIDY_TOTAL="$TEMP_TOTAL" ;;
              esac
              case "$TEMP_CRITICAL" in
                  ''|*[!0-9]*) CLANG_TIDY_CRITICAL=0 ;;
                  *) CLANG_TIDY_CRITICAL="$TEMP_CRITICAL" ;;
              esac
              case "$TEMP_IMPORTANT" in
                  ''|*[!0-9]*) CLANG_TIDY_IMPORTANT=0 ;;
                  *) CLANG_TIDY_IMPORTANT="$TEMP_IMPORTANT" ;;
              esac
              case "$TEMP_PERFORMANCE" in
                  ''|*[!0-9]*) CLANG_TIDY_PERFORMANCE=0 ;;
                  *) CLANG_TIDY_PERFORMANCE="$TEMP_PERFORMANCE" ;;
              esac
              case "$TEMP_FILES" in
                  ''|*[!0-9]*) CLANG_TIDY_FILES=0 ;;
                  *) CLANG_TIDY_FILES="$TEMP_FILES" ;;
              esac
            else
              echo "Invalid JSON in clang-tidy-results.json, using defaults"
            fi
          fi
          
          # Generate smart summary with proper severity classification
          cat > pr-comment.md << 'EOF'
          ## Static Analysis Results
          
          **Files analyzed:** $CHANGED_FILE_COUNT changed files
          
          ### Summary by Severity
          | Tool | Critical | Important | Performance | Total | Status |
          |------|----------|-----------|-------------|-------|--------|
          | Clang-Tidy | $CLANG_TIDY_CRITICAL | $CLANG_TIDY_IMPORTANT | $CLANG_TIDY_PERFORMANCE | $CLANG_TIDY_TOTAL | $([ $CLANG_TIDY_CRITICAL -eq 0 ] && echo "Clean" || echo "Needs attention") |
          | Cppcheck | $CPPCHECK_ERRORS | $CPPCHECK_WARNINGS | $CPPCHECK_PERFORMANCE | $(($CPPCHECK_ERRORS + $CPPCHECK_WARNINGS + $CPPCHECK_PERFORMANCE)) | $([ $CPPCHECK_ERRORS -eq 0 ] && echo "Clean" || echo "Needs attention") |
          
          **Legend:**
          - **Critical**: Security issues, null pointer dereferences, use-after-free, crashes
          - **Important**: Potential bugs, logic errors, problematic patterns  
          - **Performance**: Optimization opportunities, unnecessary copies
          
          EOF
          
          # Add critical issues section if there are any - handle arithmetic safely
          TOTAL_CRITICAL=0
          if [ "$CLANG_TIDY_CRITICAL" -ge 0 ] 2>/dev/null && [ "$CPPCHECK_ERRORS" -ge 0 ] 2>/dev/null; then
            TOTAL_CRITICAL=$((CLANG_TIDY_CRITICAL + CPPCHECK_ERRORS))
          fi
          
          if [ $TOTAL_CRITICAL -gt 0 ]; then
            cat >> pr-comment.md << 'EOF'
          ### Critical Issues Requiring Immediate Attention
          
          These issues could cause crashes, security vulnerabilities, or data corruption:
          
          EOF
          
            # Add Clang-Tidy critical issues
            if [ -f clang-tidy-critical.txt ] && [ $CLANG_TIDY_CRITICAL -gt 0 ]; then
              echo "#### Clang-Tidy Critical Issues ($CLANG_TIDY_CRITICAL)" >> pr-comment.md
              echo '```' >> pr-comment.md
              head -20 clang-tidy-critical.txt >> pr-comment.md
              echo '```' >> pr-comment.md
              echo "" >> pr-comment.md
            fi
          
            # Add Cppcheck critical issues
            if [ -f cppcheck-summary.txt ] && [ $CPPCHECK_ERRORS -gt 0 ]; then
              echo "#### Cppcheck Errors ($CPPCHECK_ERRORS)" >> pr-comment.md
              echo '```' >> pr-comment.md
              head -10 cppcheck-summary.txt >> pr-comment.md
              echo '```' >> pr-comment.md
              echo "" >> pr-comment.md
            fi
          fi
          
          # Add important issues section
          TOTAL_IMPORTANT=$((CLANG_TIDY_IMPORTANT + CPPCHECK_WARNINGS))
          if [ $TOTAL_IMPORTANT -gt 0 ] && [ $TOTAL_IMPORTANT -le 10 ]; then
            cat >> pr-comment.md << 'EOF'
          ### Important Issues to Consider
          
          These issues could lead to bugs or maintenance problems:
          
          EOF
          
            if [ -f clang-tidy-important.txt ] && [ $CLANG_TIDY_IMPORTANT -gt 0 ]; then
              echo "#### Potential Bugs ($CLANG_TIDY_IMPORTANT)" >> pr-comment.md
              echo '<details><summary>Click to expand</summary>' >> pr-comment.md
              echo '' >> pr-comment.md
              echo '```' >> pr-comment.md
              head -15 clang-tidy-important.txt >> pr-comment.md
              echo '```' >> pr-comment.md
              echo '</details>' >> pr-comment.md
              echo "" >> pr-comment.md
            fi
          elif [ $TOTAL_IMPORTANT -gt 10 ]; then
            echo "### Important Issues Found ($TOTAL_IMPORTANT)" >> pr-comment.md
            echo "" >> pr-comment.md
            echo "Found $TOTAL_IMPORTANT important issues. Consider reviewing these for potential bugs." >> pr-comment.md
            echo "" >> pr-comment.md
          fi
          
          # Add performance section only if not too many
          TOTAL_PERFORMANCE=$((CLANG_TIDY_PERFORMANCE + CPPCHECK_PERFORMANCE))
          if [ $TOTAL_PERFORMANCE -gt 0 ] && [ $TOTAL_PERFORMANCE -le 20 ]; then
            cat >> pr-comment.md << 'EOF'
          ### Performance Optimization Opportunities
          
          <details>
          <summary>$TOTAL_PERFORMANCE performance suggestions (click to expand)</summary>
          
          EOF
          
            if [ -f clang-tidy-performance.txt ] && [ $CLANG_TIDY_PERFORMANCE -gt 0 ]; then
              echo '```' >> pr-comment.md
              head -10 clang-tidy-performance.txt >> pr-comment.md
              echo '```' >> pr-comment.md
            fi
            echo '</details>' >> pr-comment.md
            echo "" >> pr-comment.md
          elif [ $TOTAL_PERFORMANCE -gt 20 ]; then
            echo "### Performance Suggestions ($TOTAL_PERFORMANCE)" >> pr-comment.md
            echo "" >> pr-comment.md
            echo "Found $TOTAL_PERFORMANCE performance optimization opportunities. Most are parameter passing improvements." >> pr-comment.md
            echo "" >> pr-comment.md
          fi
          
          # Success message if clean
          if [ $TOTAL_CRITICAL -eq 0 ] && [ $TOTAL_IMPORTANT -eq 0 ]; then
            cat >> pr-comment.md << 'EOF'
          ### Great Job!
          
          No critical or important issues found in the changed files. Your code looks solid!
          
          EOF
          fi
          
          # Add footer
          cat >> pr-comment.md << 'EOF'
          
          ---
          <details>
          <summary>Analysis Details</summary>
          
          - **Scope**: Analysis focused on **changed files only** to provide relevant feedback
          - **Critical**: Security vulnerabilities, null pointer issues, use-after-free, crashes
          - **Important**: Logic errors, easily-swappable parameters, potential undefined behavior  
          - **Performance**: Unnecessary copies, parameter passing optimizations
          - **Excluded**: Style suggestions, minor modernization hints (unless they affect correctness)
          - View full reports in the Actions artifacts for complete details
          
          </details>
          EOF
          
          # Substitute variables
          sed -i "s/\$CHANGED_FILE_COUNT/$CHANGED_FILE_COUNT/g" pr-comment.md
          sed -i "s/\$CLANG_TIDY_CRITICAL/$CLANG_TIDY_CRITICAL/g" pr-comment.md
          sed -i "s/\$CLANG_TIDY_IMPORTANT/$CLANG_TIDY_IMPORTANT/g" pr-comment.md
          sed -i "s/\$CLANG_TIDY_PERFORMANCE/$CLANG_TIDY_PERFORMANCE/g" pr-comment.md
          sed -i "s/\$CLANG_TIDY_TOTAL/$CLANG_TIDY_TOTAL/g" pr-comment.md
          sed -i "s/\$CPPCHECK_ERRORS/${CPPCHECK_ERRORS:-0}/g" pr-comment.md
          sed -i "s/\$CPPCHECK_WARNINGS/${CPPCHECK_WARNINGS:-0}/g" pr-comment.md
          sed -i "s/\$CPPCHECK_PERFORMANCE/${CPPCHECK_PERFORMANCE:-0}/g" pr-comment.md
          sed -i "s/\$TOTAL_CRITICAL/$TOTAL_CRITICAL/g" pr-comment.md
          sed -i "s/\$TOTAL_IMPORTANT/$TOTAL_IMPORTANT/g" pr-comment.md
          sed -i "s/\$TOTAL_PERFORMANCE/$TOTAL_PERFORMANCE/g" pr-comment.md

      - name: Generate Skip Analysis Comment
        if: env.SKIP_ANALYSIS == 'true'
        run: |
          cat > pr-comment.md << 'EOF'
          ## Static Analysis Results
          
          **No C++ files were changed in this PR** - static analysis was skipped.
          
          Only changes to documentation, configuration, or non-C++ files were detected.
          EOF

      - name: Display Results Summary
        if: always()
        run: |
          echo "=== SMART STATIC ANALYSIS COMPLETE ==="
          echo ""
          
          if [ "$SKIP_ANALYSIS" = "true" ]; then
            echo "No C++ files changed - analysis was skipped"
          else
            echo "Files analyzed: $CHANGED_FILE_COUNT"
          
            if [ -f clang-tidy-results.json ]; then
              CRITICAL=$(jq -r '.summary.critical_issues // 0' clang-tidy-results.json)
              IMPORTANT=$(jq -r '.summary.important_issues // 0' clang-tidy-results.json)
              PERFORMANCE=$(jq -r '.summary.performance_issues // 0' clang-tidy-results.json)
              TOTAL=$(jq -r '.summary.total_issues // 0' clang-tidy-results.json)
              echo "Clang-tidy: $CRITICAL critical, $IMPORTANT important, $PERFORMANCE performance ($TOTAL total)"
            fi
          
            if [ -n "${CPPCHECK_ERRORS:-}" ]; then
              echo "Cppcheck: ${CPPCHECK_ERRORS:-0} errors, ${CPPCHECK_WARNINGS:-0} warnings, ${CPPCHECK_PERFORMANCE:-0} performance"
            fi
          fi
          
          echo ""
          echo "PR Comment preview:"
          echo "==================="
          cat pr-comment.md || echo "No PR comment generated"

      - name: Upload Analysis Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: smart-static-analysis-reports
          path: |
            clang-tidy-results.json
            clang-tidy-summary.txt
            clang-tidy-critical.txt
            clang-tidy-important.txt
            clang-tidy-performance.txt
            cppcheck-report.xml
            cppcheck-summary.txt
            pr-comment.md
            changed_cpp_files.txt
            compile_commands.json

      - name: Comment PR with Smart Results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        continue-on-error: true
        with:
          script: |
            const fs = require('fs');
            
            if (!fs.existsSync('pr-comment.md')) {
              console.log('No PR comment file found');
              return;
            }
            
            const comment = fs.readFileSync('pr-comment.md', 'utf8');
            
            // Check if we already commented on this PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            // Look for existing static analysis comment
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Static Analysis Results')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
              console.log('Updated existing static analysis comment');
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              console.log('Created new static analysis comment');
            }

      - name: Set Analysis Status
        if: env.SKIP_ANALYSIS != 'true'
        run: |
          # Report findings as informational only - never fail the build
          
          if [ -f clang-tidy-results.json ]; then
            CRITICAL=$(jq -r '.summary.critical_issues // 0' clang-tidy-results.json)
            IMPORTANT=$(jq -r '.summary.important_issues // 0' clang-tidy-results.json)
            PERFORMANCE=$(jq -r '.summary.performance_issues // 0' clang-tidy-results.json)
          
            if [ "$CRITICAL" -gt 0 ]; then
              echo "::notice::Found $CRITICAL critical security/correctness issues - consider reviewing"
            fi
          
            if [ "$IMPORTANT" -gt 0 ]; then
              echo "::notice::Found $IMPORTANT important issues - consider reviewing"
            fi
          
            if [ "$PERFORMANCE" -gt 0 ]; then
              echo "::notice::Found $PERFORMANCE performance optimization opportunities"
            fi
          fi
          
          if [ -n "${CPPCHECK_ERRORS:-}" ] && [ "${CPPCHECK_ERRORS:-0}" -gt 0 ]; then
            echo "::notice::Found ${CPPCHECK_ERRORS} Cppcheck errors - consider reviewing"
          fi
          
          if [ -n "${CPPCHECK_WARNINGS:-}" ] && [ "${CPPCHECK_WARNINGS:-0}" -gt 0 ]; then
            echo "::notice::Found ${CPPCHECK_WARNINGS} Cppcheck warnings - consider reviewing"
          fi
          
          echo "Static analysis completed successfully - all findings are informational only"