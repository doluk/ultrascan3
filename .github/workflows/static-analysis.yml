name: Static Analysis (Smart & Actionable)
on:
  pull_request:
    branches: [ master ]
    paths:
      - 'gui/**/*.cpp'
      - 'gui/**/*.h'
      - 'programs/**/*.cpp'
      - 'programs/**/*.h'
      - 'utils/**/*.cpp'
      - 'utils/**/*.h'
      - '.github/workflows/static-analysis.yml'
      - 'CMakeLists.txt'
      - '**/CMakeLists.txt'
      - '**/*.cmake'
  workflow_dispatch:

jobs:
  static-analysis:
    runs-on: ubuntu-latest
    container:
      image: ehb1/us3comp:latest
      options: --cpus 2

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Allow CI to access repo directory
        run: git config --global --add safe.directory /__w/ultrascan3/ultrascan3

      - name: Get Changed Files
        id: changed-files
        run: |
          # For PRs, compare against the base branch
          # For pushes, compare against the previous commit
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
            echo "Comparing PR changes: $BASE_SHA..$HEAD_SHA"
            CHANGED_FILES=$(git diff --name-only $BASE_SHA..$HEAD_SHA)
          else
            # For push events, compare with the previous commit
            if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
              echo "Comparing push changes: ${{ github.event.before }}..${{ github.sha }}"
              CHANGED_FILES=$(git diff --name-only ${{ github.event.before }}..${{ github.sha }})
            else
              # First commit, analyze all files
              echo "First commit - analyzing all files"
              CHANGED_FILES=$(find gui utils programs -name "*.cpp" -o -name "*.h" 2>/dev/null || true)
            fi
          fi
          
          # Filter to only C++ files we care about
          CPP_FILES=$(echo "$CHANGED_FILES" | grep -E '\.(cpp|h)$' | grep -E '^(gui|utils|programs)/' || true)
          
          echo "Changed C++ files:"
          echo "$CPP_FILES"
          
          # Save to file for later steps
          echo "$CPP_FILES" > changed_cpp_files.txt
          
          # Count files - handle empty case properly
          if [ -n "$CPP_FILES" ] && [ "$CPP_FILES" != "" ]; then
            FILE_COUNT=$(echo "$CPP_FILES" | wc -l)
            # Remove any leading/trailing whitespace
            FILE_COUNT=$(echo "$FILE_COUNT" | tr -d ' ')
          else
            FILE_COUNT=0
          fi
          
          echo "CHANGED_FILE_COUNT=$FILE_COUNT" >> $GITHUB_ENV
          
          if [ "$FILE_COUNT" -eq 0 ]; then
            echo "No C++ files changed - static analysis will be skipped"
            echo "SKIP_ANALYSIS=true" >> $GITHUB_ENV
          else
            echo "Will analyze $FILE_COUNT changed C++ files"
            echo "SKIP_ANALYSIS=false" >> $GITHUB_ENV
          fi

      - name: Install Analysis Tools and CMake Dependencies
        if: env.SKIP_ANALYSIS != 'true'
        run: |
          apt-get update || true
          apt-get install -y clang-tidy cppcheck clang-format libxml2-utils jq || true
          apt-get install -y libqwt-qt5-dev libarchive-dev || true
          apt-get install -y iwyu cmake ninja-build || true

      - name: Setup Build Environment
        if: env.SKIP_ANALYSIS != 'true'
        run: |
          export ULTRASCAN=$(pwd)
          export us3=$(pwd)
          echo "ULTRASCAN=$(pwd)" >> $GITHUB_ENV
          echo "us3=$(pwd)" >> $GITHUB_ENV
          
          if [ -d programs/us ]; then
            (cd programs/us && sh revision.sh) || true
          fi

      - name: Configure with CMake and Generate Compile Commands
        if: env.SKIP_ANALYSIS != 'true'
        run: |
          echo "Configuring build with CMake..."
          mkdir -p build
          cd build
          
          cmake .. \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DQT_QMAKE_EXECUTABLE=$(which qmake) \
            -G "Unix Makefiles" || true
          
          if [ -f compile_commands.json ]; then
            cp compile_commands.json ../
            echo "Generated compile_commands.json with CMake"
          else
            echo "Warning: Failed to generate compile_commands.json"
          fi
          cd ..

      - name: Build Components to Resolve Dependencies
        if: env.SKIP_ANALYSIS != 'true'
        run: |
          echo "Building components to ensure all dependencies are available..."
          cd build
          make -j4 || true
          echo "Build completed (errors ignored for analysis purposes)"
          cd ..

      - name: Run Smart Clang-Tidy Analysis
        if: env.SKIP_ANALYSIS != 'true'
        run: |
          if command -v clang-tidy >/dev/null 2>&1; then
            echo "Running focused Clang-Tidy analysis..."
            clang-tidy --version
          
            if [ ! -s changed_cpp_files.txt ]; then
              echo "No changed files to analyze"
              echo "No files to analyze" > clang-tidy-results.json
              exit 0
            fi
          
            # Use more focused, critical checks only
            CRITICAL_CHECKS="-*,clang-analyzer-*,bugprone-*,cppcoreguidelines-avoid-*,cppcoreguidelines-pro-*,cppcoreguidelines-slicing,performance-*,readability-misleading-indentation,readability-braces-around-statements,readability-container-size-empty"
          
            # Initialize results
            echo '{"files": [], "summary": {"total_issues": 0, "critical_issues": 0, "files_with_issues": 0}}' > clang-tidy-results.json
          
            TOTAL_ISSUES=0
            CRITICAL_ISSUES=0
            FILES_WITH_ISSUES=0
          
            if [ -f compile_commands.json ]; then
              echo "Using CMake-generated compile commands database"
          
              while IFS= read -r file; do
                if [ -n "$file" ] && [ -f "$file" ]; then
                  echo "Analyzing: $file"
          
                  # Run clang-tidy and capture output
                  TIDY_OUTPUT=$(clang-tidy "$file" \
                    -p . \
                    --checks="$CRITICAL_CHECKS" \
                    --format-style=none \
                    2>&1 || true)
          
                  # Count issues in this file - handle empty output
                  if [ -n "$TIDY_OUTPUT" ]; then
                    FILE_ISSUES=$(echo "$TIDY_OUTPUT" | grep -c "warning:\|error:" || echo "0")
                    FILE_CRITICAL=$(echo "$TIDY_OUTPUT" | grep -c "error:\|clang-analyzer-\|bugprone-\|performance-" || echo "0")
                  else
                    FILE_ISSUES=0
                    FILE_CRITICAL=0
                  fi
          
                  if [ "$FILE_ISSUES" -gt 0 ]; then
                    FILES_WITH_ISSUES=$((FILES_WITH_ISSUES + 1))
                    TOTAL_ISSUES=$((TOTAL_ISSUES + FILE_ISSUES))
                    CRITICAL_ISSUES=$((CRITICAL_ISSUES + FILE_CRITICAL))
          
                    # Extract top 5 most important issues for this file
                    TOP_ISSUES=$(echo "$TIDY_OUTPUT" | grep -E "(error:|clang-analyzer-|bugprone-|performance-)" | head -5 || true)
          
                    if [ -n "$TOP_ISSUES" ]; then
                      echo "=== Issues in $file ===" >> clang-tidy-summary.txt
                      echo "$TOP_ISSUES" >> clang-tidy-summary.txt
                      echo "" >> clang-tidy-summary.txt
                    fi
                  fi
                fi
              done < changed_cpp_files.txt
            fi
          
            # Update summary
            jq --argjson total "$TOTAL_ISSUES" \
               --argjson critical "$CRITICAL_ISSUES" \
               --argjson files "$FILES_WITH_ISSUES" \
               '.summary.total_issues = $total | .summary.critical_issues = $critical | .summary.files_with_issues = $files' \
               clang-tidy-results.json > temp.json && mv temp.json clang-tidy-results.json
          
            echo "Clang-Tidy analysis completed: $TOTAL_ISSUES total issues, $CRITICAL_ISSUES critical"
          else
            echo "Clang-tidy not available" > clang-tidy-results.json
          fi

      - name: Run Smart Cppcheck Analysis
        if: env.SKIP_ANALYSIS != 'true'
        run: |
          echo "Running focused Cppcheck analysis..."
          
          if [ ! -s changed_cpp_files.txt ]; then
            echo '<?xml version="1.0" encoding="UTF-8"?><results version="2"></results>' > cppcheck-report.xml
            exit 0
          fi
          
          # Create a list of files to analyze
          FILES_TO_ANALYZE=""
          while IFS= read -r file; do
            if [ -n "$file" ] && [ -f "$file" ]; then
              FILES_TO_ANALYZE="$FILES_TO_ANALYZE $file"
            fi
          done < changed_cpp_files.txt
          
          if [ -n "$FILES_TO_ANALYZE" ]; then
            # Focus on the most important checks
            cppcheck \
              --enable=error,warning,performance,portability \
              --inconclusive --xml --xml-version=2 \
              --suppress=missingIncludeSystem \
              --suppress=unmatchedSuppression \
              --suppress=unusedFunction \
              --library=qt --library=posix \
              --platform=unix64 \
              --max-ctu-depth=10 \
              -I./gui -I./utils -I./qwtplot3d/include \
              -DINTEL -DLINUX \
              $FILES_TO_ANALYZE 2> cppcheck-report.xml || true
          else
            echo '<?xml version="1.0" encoding="UTF-8"?><results version="2"></results>' > cppcheck-report.xml
          fi

      - name: Parse Analysis Results
        if: env.SKIP_ANALYSIS != 'true'
        run: |
          echo "Parsing analysis results for summary..."
          
          # Parse Cppcheck results - handle missing file gracefully
          CPPCHECK_ERRORS=0
          CPPCHECK_WARNINGS=0
          CPPCHECK_PERFORMANCE=0
          
          if [ -f cppcheck-report.xml ] && [ -s cppcheck-report.xml ]; then
            CPPCHECK_ERRORS=$(grep -c 'severity="error"' cppcheck-report.xml 2>/dev/null || echo "0")
            CPPCHECK_WARNINGS=$(grep -c 'severity="warning"' cppcheck-report.xml 2>/dev/null || echo "0")
            CPPCHECK_PERFORMANCE=$(grep -c 'severity="performance"' cppcheck-report.xml 2>/dev/null || echo "0")
          fi
          
          echo "CPPCHECK_ERRORS=$CPPCHECK_ERRORS" >> $GITHUB_ENV
          echo "CPPCHECK_WARNINGS=$CPPCHECK_WARNINGS" >> $GITHUB_ENV
          echo "CPPCHECK_PERFORMANCE=$CPPCHECK_PERFORMANCE" >> $GITHUB_ENV
          
          # Extract top Cppcheck issues - handle missing file gracefully
          if [ -f cppcheck-report.xml ] && [ -s cppcheck-report.xml ]; then
            TOTAL_CPPCHECK_ISSUES=$((CPPCHECK_ERRORS + CPPCHECK_WARNINGS))
            if [ "$TOTAL_CPPCHECK_ISSUES" -gt 0 ]; then
              echo "=== Top Cppcheck Issues ===" > cppcheck-summary.txt
              xmllint --xpath "//error[@severity='error' or @severity='warning']" cppcheck-report.xml 2>/dev/null | head -10 >> cppcheck-summary.txt || true
              echo "" >> cppcheck-summary.txt
            fi
          fi

      - name: Generate Actionable PR Comment
        if: env.SKIP_ANALYSIS != 'true'
        run: |
          # Read clang-tidy results - handle missing or invalid JSON
          CLANG_TIDY_TOTAL=0
          CLANG_TIDY_CRITICAL=0
          CLANG_TIDY_FILES=0
          
          if [ -f clang-tidy-results.json ]; then
            # Validate JSON first
            if jq empty clang-tidy-results.json >/dev/null 2>&1; then
              CLANG_TIDY_TOTAL=$(jq -r '.summary.total_issues // 0' clang-tidy-results.json 2>/dev/null || echo "0")
              CLANG_TIDY_CRITICAL=$(jq -r '.summary.critical_issues // 0' clang-tidy-results.json 2>/dev/null || echo "0")
              CLANG_TIDY_FILES=$(jq -r '.summary.files_with_issues // 0' clang-tidy-results.json 2>/dev/null || echo "0")
            else
              echo "Invalid JSON in clang-tidy-results.json, using defaults"
            fi
          fi
          
          # Generate smart summary
          cat > pr-comment.md << 'EOF'
          ## Static Analysis Results
          
          **Files analyzed:** $CHANGED_FILE_COUNT changed files
          
          ### Summary
          | Tool | Critical Issues | Total Issues | Status |
          |------|----------------|--------------|--------|
          | Clang-Tidy | $CLANG_TIDY_CRITICAL | $CLANG_TIDY_TOTAL | $([ $CLANG_TIDY_CRITICAL -eq 0 ] && echo "Clean" || echo "Needs attention") |
          | Cppcheck | $CPPCHECK_ERRORS | $(($CPPCHECK_ERRORS + $CPPCHECK_WARNINGS)) | $([ $CPPCHECK_ERRORS -eq 0 ] && echo "Clean" || echo "Needs attention") |
          
          EOF
          
          # Add critical issues section if there are any - handle arithmetic safely
          TOTAL_CRITICAL=0
          if [ "$CLANG_TIDY_CRITICAL" -ge 0 ] && [ "$CPPCHECK_ERRORS" -ge 0 ]; then
            TOTAL_CRITICAL=$((CLANG_TIDY_CRITICAL + CPPCHECK_ERRORS))
          fi
          if [ $TOTAL_CRITICAL -gt 0 ]; then
            cat >> pr-comment.md << 'EOF'
          ### Critical Issues Requiring Attention
          
          The following issues should be addressed before merging:
          
          EOF
          
            # Add Clang-Tidy critical issues
            if [ -f clang-tidy-summary.txt ] && [ $CLANG_TIDY_CRITICAL -gt 0 ]; then
              echo "#### Clang-Tidy Critical Issues" >> pr-comment.md
              echo '```' >> pr-comment.md
              head -20 clang-tidy-summary.txt >> pr-comment.md
              echo '```' >> pr-comment.md
              echo "" >> pr-comment.md
            fi
          
            # Add Cppcheck critical issues
            if [ -f cppcheck-summary.txt ] && [ $CPPCHECK_ERRORS -gt 0 ]; then
              echo "#### Cppcheck Errors" >> pr-comment.md
              echo '```' >> pr-comment.md
              head -10 cppcheck-summary.txt >> pr-comment.md
              echo '```' >> pr-comment.md
              echo "" >> pr-comment.md
            fi
          else
            cat >> pr-comment.md << 'EOF'
          ### Great Job!
          
          No critical issues found in the changed files. Your code looks good!
          
          EOF
          fi
          
          # Add performance suggestions if any
          if [ $CPPCHECK_PERFORMANCE -gt 0 ]; then
            cat >> pr-comment.md << 'EOF'
          ### Performance Suggestions
          
          Found $CPPCHECK_PERFORMANCE performance improvement opportunities. While not critical, these could improve efficiency.
          
          EOF
          fi
          
          # Add footer
          cat >> pr-comment.md << 'EOF'
          
          ---
          <details>
          <summary>Analysis Details</summary>
          
          - Analysis focused on **changed files only** to provide relevant feedback
          - **Critical checks**: Memory leaks, null pointer dereferences, buffer overflows, performance issues
          - **Skipped**: Style suggestions, minor modernization hints
          - View full reports in the Actions artifacts for complete details
          
          </details>
          EOF
          
          # Substitute variables
          sed -i "s/\$CHANGED_FILE_COUNT/$CHANGED_FILE_COUNT/g" pr-comment.md
          sed -i "s/\$CLANG_TIDY_CRITICAL/$CLANG_TIDY_CRITICAL/g" pr-comment.md
          sed -i "s/\$CLANG_TIDY_TOTAL/$CLANG_TIDY_TOTAL/g" pr-comment.md
          sed -i "s/\$CPPCHECK_ERRORS/${CPPCHECK_ERRORS:-0}/g" pr-comment.md
          sed -i "s/\$CPPCHECK_WARNINGS/${CPPCHECK_WARNINGS:-0}/g" pr-comment.md
          sed -i "s/\$CPPCHECK_PERFORMANCE/${CPPCHECK_PERFORMANCE:-0}/g" pr-comment.md

      - name: Generate Skip Analysis Comment
        if: env.SKIP_ANALYSIS == 'true'
        run: |
          cat > pr-comment.md << 'EOF'
          ## Static Analysis Results
          
          **No C++ files were changed in this PR** - static analysis was skipped.
          
          Only changes to documentation, configuration, or non-C++ files were detected.
          EOF

      - name: Display Results Summary
        if: always()
        run: |
          echo "=== SMART STATIC ANALYSIS COMPLETE ==="
          echo ""
          
          if [ "$SKIP_ANALYSIS" = "true" ]; then
            echo "No C++ files changed - analysis was skipped"
          else
            echo "Files analyzed: $CHANGED_FILE_COUNT"
          
            if [ -f clang-tidy-results.json ]; then
              CRITICAL=$(jq -r '.summary.critical_issues // 0' clang-tidy-results.json)
              TOTAL=$(jq -r '.summary.total_issues // 0' clang-tidy-results.json)
              echo "Clang-tidy: $CRITICAL critical issues, $TOTAL total"
            fi
          
            if [ -n "${CPPCHECK_ERRORS:-}" ]; then
              echo "Cppcheck: ${CPPCHECK_ERRORS:-0} errors, ${CPPCHECK_WARNINGS:-0} warnings"
            fi
          fi
          
          echo ""
          echo "PR Comment preview:"
          echo "==================="
          cat pr-comment.md || echo "No PR comment generated"

      - name: Upload Analysis Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: smart-static-analysis-reports
          path: |
            clang-tidy-results.json
            clang-tidy-summary.txt
            cppcheck-report.xml
            cppcheck-summary.txt
            pr-comment.md
            changed_cpp_files.txt
            compile_commands.json

      - name: Comment PR with Smart Results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        continue-on-error: true
        with:
          script: |
            const fs = require('fs');
            
            if (!fs.existsSync('pr-comment.md')) {
              console.log('No PR comment file found');
              return;
            }
            
            const comment = fs.readFileSync('pr-comment.md', 'utf8');
            
            // Check if we already commented on this PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            // Look for existing static analysis comment
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Static Analysis Results')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
              console.log('Updated existing static analysis comment');
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              console.log('Created new static analysis comment');
            }

      - name: Set Analysis Status
        if: env.SKIP_ANALYSIS != 'true'
        run: |
          # Determine if we should fail the build (optional)
          SHOULD_FAIL=false
          
          if [ -f clang-tidy-results.json ]; then
            CRITICAL=$(jq -r '.summary.critical_issues // 0' clang-tidy-results.json)
            if [ "$CRITICAL" -gt 5 ]; then
              echo "::warning::Found $CRITICAL critical issues - consider addressing before merge"
              # Set SHOULD_FAIL=true if you want to enforce this
            fi
          fi
          
          if [ -n "${CPPCHECK_ERRORS:-}" ] && [ "${CPPCHECK_ERRORS:-0}" -gt 3 ]; then
            echo "::warning::Found ${CPPCHECK_ERRORS} Cppcheck errors - consider addressing before merge"
            # Set SHOULD_FAIL=true if you want to enforce this
          fi
          
          if [ "$SHOULD_FAIL" = "true" ]; then
            echo "::error::Too many critical issues found - failing build"
            exit 1
          else
            echo "Static analysis completed - issues noted but not failing build"
          fi