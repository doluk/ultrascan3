name: Static Analysis (Non-Failing)
on:
  push:
  pull_request:
    branches: [ master ]
    paths:
      - 'gui/**/*.cpp'
      - 'gui/**/*.h'
      - 'programs/**/*.cpp'
      - 'programs/**/*.h'
      - 'utils/**/*.cpp'
      - 'utils/**/*.h'
      - '.github/workflows/static-analysis.yml'
  workflow_dispatch:

jobs:
  static-analysis:
    runs-on: ubuntu-latest
    container:
      image: ehb1/us3comp:latest
      options: --cpus 2

    steps:
      - uses: actions/checkout@v4

      - name: Install Additional Analysis Tools
        run: |
          # Only install static analysis tools that might not be in the Docker image
          apt-get update || true
          apt-get install -y clang-tidy cppcheck bear clang-format libxml2-utils || true
          apt-get install -y libqwt-qt5-dev || apt-get install -y libqwt-dev || true
          # Note: iwyu might not be available in all repos, so make it optional
          apt-get install -y iwyu || echo "iwyu not available, skipping"

      - name: Setup Ultrascan Build Environment
        run: |
          # Your Docker image should already have local.pri configured
          # If not, copy from template
          if [ ! -f local.pri ]; then
            cp local.pri.template local.pri || true
          fi

      - name: Generate Compile Commands from QMake
        run: |
          # Your Docker environment should have all the right paths
          echo "Generating compile commands for Ultrascan components..."
          
          # Generate Makefiles using your Docker's configured environment
          (cd qwtplot3d && qmake qwtplot3d.pro) || true
          (cd utils && qmake libus_utils.pro) || true
          (cd gui && qmake libus_gui.pro) || true
          
          # Try to capture compile commands
          if command -v bear >/dev/null 2>&1; then
            bear -- make -n -C qwtplot3d 2>/dev/null || true
            bear -- make -n -C utils 2>/dev/null || true
            bear -- make -n -C gui 2>/dev/null || true
          fi
          
          # Show what qmake detected for debugging
          echo "QMake configuration detected:"
          qmake -query || true

      - name: Run Cppcheck on Ultrascan
        run: |
          cppcheck --version || true
          cppcheck --enable=all --inconclusive --xml --xml-version=2 \
            --suppress=missingIncludeSystem \
            --suppress=unmatchedSuppression \
            --suppress=unusedFunction \
            --library=qt \
            --platform=unix64 \
            -I./gui -I./utils -I./qwtplot3d/include \
            -I/usr/include/qt5 -I/usr/include/mysql \
            -DINTEL -DLINUX \
            gui/ utils/ programs/ 2> cppcheck-report.xml || true

      - name: Run Include-What-You-Use with QMake Info
        run: |
          if command -v iwyu_tool.py >/dev/null 2>&1; then
            echo "Running Include-What-You-Use analysis..."
            if [ -f compile_commands.json ]; then
              iwyu_tool.py -p . gui/ programs/ utils/ > iwyu-report.txt 2>&1 || true
            else
              echo "No compile commands available - IWYU analysis limited" > iwyu-report.txt
            fi
          elif command -v include-what-you-use >/dev/null 2>&1; then
            echo "Running basic IWYU on sample files..."
            find gui utils programs -name "*.cpp" -type f | head -5 | while read -r file; do
              echo "Checking: $file"
              include-what-you-use "$file" \
                -I./gui -I./utils -I./qwtplot3d/include \
                -I/usr/include/qt5 -I/usr/include/qt5/QtCore \
                2>&1 || true
            done > iwyu-report.txt || true
          else
            echo "Include-What-You-Use not available in this environment" > iwyu-report.txt
            echo "IWYU can help identify missing #include statements" >> iwyu-report.txt
            echo "Consider installing iwyu package for better include analysis" >> iwyu-report.txt
          fi

      - name: Run Clang-Tidy with Ultrascan Docker Environment
        run: |
          if command -v clang-tidy >/dev/null 2>&1; then
            clang-tidy --version || true
          
            # Get actual include paths from qmake in Docker environment
            QT_INCLUDES=$(qmake -query QT_INSTALL_HEADERS) || true
          
            # Find and verify we have .cpp files
            echo "Looking for C++ files..."
            find gui utils programs -name "*.cpp" -type f | head -10 || true
          
            # Count files found
            file_count=$(find gui utils programs -name "*.cpp" -type f | wc -l) || 0
            echo "Found $file_count .cpp files"
          
            if [ "$file_count" -gt 0 ]; then
              # Run clang-tidy on a limited set of files (first 20 to avoid overwhelming output)
              find gui utils programs -name "*.cpp" -type f | head -20 | while read -r file; do
                echo "Analyzing: $file"
                clang-tidy "$file" \
                  --checks='-*,clang-analyzer-*,cppcoreguidelines-*,modernize-*,performance-*,readability-*,bugprone-*,misc-*' \
                  -- -I./gui -I./utils -I./qwtplot3d/include \
                     -I${QT_INCLUDES} -I${QT_INCLUDES}/QtCore -I${QT_INCLUDES}/QtWidgets \
                     -I${QT_INCLUDES}/QtGui -I${QT_INCLUDES}/QtXml \
                     -DINTEL -DLINUX -DQT_WIDGETS_LIB -DQT_XML_LIB \
                  2>&1 || true
              done > clang-tidy-report.txt || true
            else
              echo "No .cpp files found in gui, utils, or programs directories" > clang-tidy-report.txt
            fi
          
            echo "Clang-tidy analysis completed."
          else
            echo "Clang-tidy not available in Docker image" > clang-tidy-report.txt
          fi

      - name: Check Code Format
        run: |
          # Check if clang-format is available before using it
          if command -v clang-format >/dev/null 2>&1; then
            echo "Checking code formatting standards..."
            find gui programs utils -name "*.cpp" -o -name "*.h" | xargs clang-format --dry-run || true
          else
            echo "clang-format not available, skipping format check"
          fi

      - name: Generate Analysis Summary
        run: |
          echo "## Static Analysis Results" > analysis-summary.md
          echo "" >> analysis-summary.md
          
          echo "### Clang-Tidy Results" >> analysis-summary.md
          echo '```' >> analysis-summary.md
          if [ -f clang-tidy-report.txt ]; then
            head -50 clang-tidy-report.txt >> analysis-summary.md
          else
            echo "No clang-tidy report generated" >> analysis-summary.md
          fi
          echo '```' >> analysis-summary.md
          echo "" >> analysis-summary.md
          
          echo "### Cppcheck Results" >> analysis-summary.md
          echo '```' >> analysis-summary.md
          if [ -f cppcheck-report.xml ]; then
            if command -v xmllint >/dev/null 2>&1; then
              xmllint --format cppcheck-report.xml | head -50 >> analysis-summary.md || head -50 cppcheck-report.xml >> analysis-summary.md
            else
              head -50 cppcheck-report.xml >> analysis-summary.md
            fi
          else
            echo "No cppcheck report generated" >> analysis-summary.md
          fi
          echo '```' >> analysis-summary.md
          echo "" >> analysis-summary.md
          
          echo "### Include-What-You-Use Results" >> analysis-summary.md
          echo '```' >> analysis-summary.md
          if [ -f iwyu-report.txt ]; then
            head -50 iwyu-report.txt >> analysis-summary.md
          else
            echo "No IWYU report generated" >> analysis-summary.md
          fi
          echo '```' >> analysis-summary.md

      - name: Show Analysis Results
        run: |
          echo "=== STATIC ANALYSIS COMPLETE ==="
          echo ""
          if [ -f clang-tidy-report.txt ]; then
            echo "Clang-tidy found $(wc -l < clang-tidy-report.txt) lines of output"
          else
            echo "Clang-tidy report not found"
          fi
          echo "Cppcheck results saved to cppcheck-report.xml (if generated)"
          echo "Missing includes check completed"
          echo ""
          echo "=== SUMMARY OF FINDINGS ==="
          cat analysis-summary.md || echo "No analysis summary generated"
          echo ""
          echo "=== FILES GENERATED ==="
          ls -la *report* analysis-summary.md 2>/dev/null || echo "No report files found"

      - name: Upload Analysis Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: static-analysis-reports
          path: |
            clang-tidy-report.txt
            cppcheck-report.xml
            iwyu-report.txt
            analysis-summary.md

      - name: Comment PR with Results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        continue-on-error: true
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('analysis-summary.md')) {
              const summary = fs.readFileSync('analysis-summary.md', 'utf8');
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            } else {
              console.log('No analysis summary found to comment');
            }

      - name: Report Critical Issues (Non-Failing)
        run: |
          # Count critical issues and report (but don't fail)
          if [ -f clang-tidy-report.txt ]; then
            critical_issues=$(grep -c "error:" clang-tidy-report.txt 2>/dev/null || echo "0")
            echo "Found $critical_issues critical issues"
            if [ "$critical_issues" -gt 50 ]; then
              echo "WARNING: Many critical issues found: $critical_issues"
              echo "This would normally fail the build, but we're in introduction mode"
              echo "Consider addressing these issues before enabling strict mode"
            else
              echo "Critical issues within acceptable range: $critical_issues"
            fi
          else
            echo "No clang-tidy report found, skipping critical issue check"
          fi
          echo "Static analysis completed successfully (non-failing mode)"